// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package mediaplayer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// MediaPlayerClient is the client API for MediaPlayer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaPlayerClient interface {
	SetVolume(ctx context.Context, in *SetVolumeReq, opts ...grpc.CallOption) (*SetVolumeRes, error)
	StreamUpdates(ctx context.Context, in *StreamUpdatesReq, opts ...grpc.CallOption) (MediaPlayer_StreamUpdatesClient, error)
}

type mediaPlayerClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaPlayerClient(cc grpc.ClientConnInterface) MediaPlayerClient {
	return &mediaPlayerClient{cc}
}

func (c *mediaPlayerClient) SetVolume(ctx context.Context, in *SetVolumeReq, opts ...grpc.CallOption) (*SetVolumeRes, error) {
	out := new(SetVolumeRes)
	err := c.cc.Invoke(ctx, "/mediaplayer.MediaPlayer/SetVolume", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mediaPlayerClient) StreamUpdates(ctx context.Context, in *StreamUpdatesReq, opts ...grpc.CallOption) (MediaPlayer_StreamUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MediaPlayer_serviceDesc.Streams[0], "/mediaplayer.MediaPlayer/StreamUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &mediaPlayerStreamUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MediaPlayer_StreamUpdatesClient interface {
	Recv() (*Update, error)
	grpc.ClientStream
}

type mediaPlayerStreamUpdatesClient struct {
	grpc.ClientStream
}

func (x *mediaPlayerStreamUpdatesClient) Recv() (*Update, error) {
	m := new(Update)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MediaPlayerServer is the server API for MediaPlayer service.
// All implementations must embed UnimplementedMediaPlayerServer
// for forward compatibility
type MediaPlayerServer interface {
	SetVolume(context.Context, *SetVolumeReq) (*SetVolumeRes, error)
	StreamUpdates(*StreamUpdatesReq, MediaPlayer_StreamUpdatesServer) error
	mustEmbedUnimplementedMediaPlayerServer()
}

// UnimplementedMediaPlayerServer must be embedded to have forward compatible implementations.
type UnimplementedMediaPlayerServer struct {
}

func (*UnimplementedMediaPlayerServer) SetVolume(context.Context, *SetVolumeReq) (*SetVolumeRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetVolume not implemented")
}
func (*UnimplementedMediaPlayerServer) StreamUpdates(*StreamUpdatesReq, MediaPlayer_StreamUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamUpdates not implemented")
}
func (*UnimplementedMediaPlayerServer) mustEmbedUnimplementedMediaPlayerServer() {}

func RegisterMediaPlayerServer(s *grpc.Server, srv MediaPlayerServer) {
	s.RegisterService(&_MediaPlayer_serviceDesc, srv)
}

func _MediaPlayer_SetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaPlayerServer).SetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mediaplayer.MediaPlayer/SetVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaPlayerServer).SetVolume(ctx, req.(*SetVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _MediaPlayer_StreamUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamUpdatesReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MediaPlayerServer).StreamUpdates(m, &mediaPlayerStreamUpdatesServer{stream})
}

type MediaPlayer_StreamUpdatesServer interface {
	Send(*Update) error
	grpc.ServerStream
}

type mediaPlayerStreamUpdatesServer struct {
	grpc.ServerStream
}

func (x *mediaPlayerStreamUpdatesServer) Send(m *Update) error {
	return x.ServerStream.SendMsg(m)
}

var _MediaPlayer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mediaplayer.MediaPlayer",
	HandlerType: (*MediaPlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetVolume",
			Handler:    _MediaPlayer_SetVolume_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamUpdates",
			Handler:       _MediaPlayer_StreamUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "mediaplayer.proto",
}
